{"ast":null,"code":"var _jsxFileName = \"/home/pedro/Documents/gostack/aulas/06-gobarber-web/src/components/Input/index.tsx\";\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { useField } from '@unform/core';\nimport { Container } from './styles';\n\nconst Input = ({\n  name,\n  icon: Icon,\n  ...rest\n}) => {\n  const inputRef = useRef(null);\n  const [isFocused, setIsFocused] = useState(false);\n  const [isFilled, setIsFilled] = useState(false);\n  const {\n    fieldName,\n    defaultValue,\n    error,\n    registerField\n  } = useField(name);\n  const handleInputBlur = useCallback(() => {\n    var _inputRef$current;\n\n    setIsFocused(false);\n\n    if ((_inputRef$current = inputRef.current) === null || _inputRef$current === void 0 ? void 0 : _inputRef$current.value) {\n      setIsFilled(true);\n    } else {\n      setIsFilled(false);\n    }\n\n    se;\n  }, []);\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    });\n  }, [fieldName, registerField]);\n  return /*#__PURE__*/React.createElement(Container, {\n    isFocused: isFocused,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, Icon && /*#__PURE__*/React.createElement(Icon, {\n    size: 20,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 15\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", Object.assign({\n    onFocus: () => setIsFocused(true),\n    onBlur: handleInputBlur,\n    defaultValue: defaultValue,\n    ref: inputRef\n  }, rest, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  })));\n};\n\nexport default Input;","map":{"version":3,"sources":["/home/pedro/Documents/gostack/aulas/06-gobarber-web/src/components/Input/index.tsx"],"names":["React","useEffect","useRef","useState","useCallback","useField","Container","Input","name","icon","Icon","rest","inputRef","isFocused","setIsFocused","isFilled","setIsFilled","fieldName","defaultValue","error","registerField","handleInputBlur","current","value","se","ref","path"],"mappings":";AAAA,OAAOA,KAAP,IAAqCC,SAArC,EAAgDC,MAAhD,EAAwDC,QAAxD,EAAkEC,WAAlE,QAAqF,OAArF;AAEA,SAASC,QAAT,QAAyB,cAAzB;AAEA,SAASC,SAAT,QAA0B,UAA1B;;AAOA,MAAMC,KAA2B,GAAG,CAAE;AAACC,EAAAA,IAAD;AAAOC,EAAAA,IAAI,EAAEC,IAAb;AAAmB,KAAGC;AAAtB,CAAF,KAAmC;AACrE,QAAMC,QAAQ,GAAGV,MAAM,CAAmB,IAAnB,CAAvB;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BX,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACY,QAAD,EAAWC,WAAX,IAA0Bb,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM;AAAEc,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA,KAA3B;AAAkCC,IAAAA;AAAlC,MAAoDf,QAAQ,CAACG,IAAD,CAAlE;AAEA,QAAMa,eAAe,GAAGjB,WAAW,CAAC,MAAM;AAAA;;AACxCU,IAAAA,YAAY,CAAC,KAAD,CAAZ;;AAEA,6BAAIF,QAAQ,CAACU,OAAb,sDAAI,kBAAkBC,KAAtB,EAA6B;AAC3BP,MAAAA,WAAW,CAAC,IAAD,CAAX;AACD,KAFD,MAEO;AACLA,MAAAA,WAAW,CAAC,KAAD,CAAX;AACD;;AAEDQ,IAAAA,EAAE;AACH,GAVkC,EAUhC,EAVgC,CAAnC;AAYAvB,EAAAA,SAAS,CAAC,MAAM;AACdmB,IAAAA,aAAa,CAAC;AACZZ,MAAAA,IAAI,EAAES,SADM;AAEZQ,MAAAA,GAAG,EAAEb,QAAQ,CAACU,OAFF;AAGZI,MAAAA,IAAI,EAAE;AAHM,KAAD,CAAb;AAKD,GANQ,EAMN,CAACT,SAAD,EAAYG,aAAZ,CANM,CAAT;AAQA,sBACE,oBAAC,SAAD;AAAW,IAAA,SAAS,EAAEP,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEH,IAAI,iBAAI,oBAAC,IAAD;AAAM,IAAA,IAAI,EAAE,EAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADV,eAEA;AACE,IAAA,OAAO,EAAE,MAAMI,YAAY,CAAC,IAAD,CAD7B;AAEE,IAAA,MAAM,EAAEO,eAFV;AAGE,IAAA,YAAY,EAAEH,YAHhB;AAIE,IAAA,GAAG,EAAEN;AAJP,KAKMD,IALN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAFA,CADF;AAWD,CArCD;;AAuCA,eAAeJ,KAAf","sourcesContent":["import React, { InputHTMLAttributes, useEffect, useRef, useState, useCallback } from 'react';\nimport { IconBaseProps } from 'react-icons'\nimport { useField } from '@unform/core'\n\nimport { Container } from './styles'\n\ninterface InputProps extends InputHTMLAttributes<HTMLInputElement> {\n  name: string;\n  icon?: React.ComponentType<IconBaseProps>;\n}\n\nconst Input: React.FC<InputProps> = ( {name, icon: Icon, ...rest} ) => {\n  const inputRef = useRef<HTMLInputElement>(null)\n  const [isFocused, setIsFocused] = useState(false)\n  const [isFilled, setIsFilled] = useState(false)\n  const { fieldName, defaultValue, error, registerField } = useField(name);\n\n  const handleInputBlur = useCallback(() => {\n    setIsFocused(false)\n\n    if (inputRef.current?.value) {\n      setIsFilled(true)\n    } else {\n      setIsFilled(false)\n    }\n\n    se\n  }, [])\n\n  useEffect(() => {\n    registerField({\n      name: fieldName,\n      ref: inputRef.current,\n      path: 'value'\n    })\n  }, [fieldName, registerField])\n\n  return (\n    <Container isFocused={isFocused }>\n    { Icon && <Icon size={20}/>}\n    <input\n      onFocus={() => setIsFocused(true)}\n      onBlur={handleInputBlur}\n      defaultValue={defaultValue}\n      ref={inputRef}\n      {...rest} />\n    </Container>\n  )\n}\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}