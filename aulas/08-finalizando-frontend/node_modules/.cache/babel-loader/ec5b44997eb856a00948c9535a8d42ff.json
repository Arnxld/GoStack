{"ast":null,"code":"var _jsxFileName = \"/home/pedro/Documents/gostack/aulas/08-finalizando-frontend/src/pages/ResetPassword/index.tsx\";\nimport React, { useRef, useCallback } from 'react';\nimport { FiLock } from 'react-icons/fi';\nimport { Form } from '@unform/web';\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom';\nimport { useToast } from '../../hooks/toast';\nimport getValidationErrors from '../../utils/getValidationErrors';\nimport logoImg from \"../../assets/logo.svg\";\nimport { Container, Content, Background, AnimationContainer } from './styles';\nimport Input from '../../components/Input';\nimport Button from '../../components/Button';\n\nconst SignIn = () => {\n  const formRef = useRef(null);\n  const {\n    addToast\n  } = useToast();\n  const history = useHistory();\n  const handleSubmit = useCallback(async data => {\n    try {\n      var _formRef$current;\n\n      (_formRef$current = formRef.current) === null || _formRef$current === void 0 ? void 0 : _formRef$current.setErrors({});\n      const schema = Yup.object().shape({\n        password: Yup.string().required('Senha obrigatória'),\n        password_confirmation: Yup.string().oneOf([])\n      });\n      await schema.validate(data, {\n        abortEarly: false\n      });\n      history.push('/');\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        var _formRef$current2;\n\n        const errors = getValidationErrors(err);\n        (_formRef$current2 = formRef.current) === null || _formRef$current2 === void 0 ? void 0 : _formRef$current2.setErrors(errors);\n        return;\n      }\n\n      addToast({\n        type: 'error',\n        title: 'Erro ao resetar senha',\n        description: 'Ocorreu um erro ao resetar sua senha, tente novamente'\n      });\n    }\n  }, [addToast, history]);\n  return /*#__PURE__*/React.createElement(Container, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(Content, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(AnimationContainer, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: logoImg,\n    alt: \"GoBarber\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Form, {\n    ref: formRef,\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 13\n    }\n  }, \"Resetar senha\"), /*#__PURE__*/React.createElement(Input, {\n    name: \"password\",\n    icon: FiLock,\n    type: \"password\",\n    placeholder: \"Nova senha\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    name: \"password_confirmation\",\n    icon: FiLock,\n    type: \"password\",\n    placeholder: \"Confirma\\xE7\\xE3o da senha\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 13\n    }\n  }, \"Alterar senha\")))), /*#__PURE__*/React.createElement(Background, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default SignIn;","map":{"version":3,"sources":["/home/pedro/Documents/gostack/aulas/08-finalizando-frontend/src/pages/ResetPassword/index.tsx"],"names":["React","useRef","useCallback","FiLock","Form","Yup","useHistory","useToast","getValidationErrors","Container","Content","Background","AnimationContainer","Input","Button","SignIn","formRef","addToast","history","handleSubmit","data","current","setErrors","schema","object","shape","password","string","required","password_confirmation","oneOf","validate","abortEarly","push","err","ValidationError","errors","type","title","description","logoImg"],"mappings":"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","sourcesContent":["import React, { useRef, useCallback } from 'react';\nimport { FiLock } from 'react-icons/fi';\nimport { Form } from '@unform/web';\nimport { FormHandles } from '@unform/core';\nimport * as Yup from 'yup';\nimport { useHistory } from 'react-router-dom';\n\nimport { useToast } from '../../hooks/toast'\nimport getValidationErrors from '../../utils/getValidationErrors'\n\nimport logoImg from '../../assets/logo.svg'\nimport { Container, Content, Background, AnimationContainer } from './styles';\n\nimport Input from '../../components/Input'\nimport Button from '../../components/Button'\n\ninterface ResetPasswordFormData {\n  password: string\n  password_confirmation: string\n}\n\nconst SignIn: React.FC = () => {\n  const formRef = useRef<FormHandles>(null);\n\n  const { addToast } = useToast();\n  const history = useHistory();\n\n  const handleSubmit = useCallback(async (data: ResetPasswordFormData) => {\n    try {\n      formRef.current?.setErrors({})\n\n      const schema = Yup.object().shape({\n        password: Yup.string().required('Senha obrigatória'),\n        password_confirmation: Yup.string().oneOf([])\n      })\n\n      await schema.validate(data, {\n        abortEarly: false,\n      })\n\n      history.push('/')\n\n    } catch (err) {\n      if (err instanceof Yup.ValidationError) {\n        const errors = getValidationErrors(err);\n        formRef.current?.setErrors(errors)\n\n        return;\n      }\n\n      addToast({\n        type: 'error',\n        title: 'Erro ao resetar senha',\n        description: 'Ocorreu um erro ao resetar sua senha, tente novamente',\n      })\n\n    }\n  }, [addToast, history])\n\n  return (\n    <Container>\n      <Content>\n        <AnimationContainer>\n          <img src={logoImg} alt=\"GoBarber\"/>\n\n          <Form ref={formRef} onSubmit={handleSubmit}>\n            <h1>Resetar senha</h1>\n\n            <Input name=\"password\" icon={FiLock} type=\"password\" placeholder=\"Nova senha\" />\n            <Input name=\"password_confirmation\" icon={FiLock} type=\"password\" placeholder=\"Confirmação da senha\" />\n\n            <Button type=\"submit\">Alterar senha</Button>\n\n          </ Form>\n        </AnimationContainer>\n      </Content>\n\n      <Background></Background>\n    </Container>\n  );\n};\n\nexport default SignIn\n"]},"metadata":{},"sourceType":"module"}